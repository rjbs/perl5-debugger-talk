---- config
# Basic config options.
title: how to debug perl
indent: 5
auto_size: 1
# height: 18
# width: 69
vim_opts: '-u NONE'
skip: 0

vimrc: |
  colorscheme manxome

# The following options are for Gvim usage.
# vim: gvim
# gvimrc: |
#   set fuopt=maxhorz,maxvert
#   set guioptions=egmLtT
#   set guifont=Bitstream_Vera_Sans_Mono:h18
#   set guicursor=a:blinkon0-ver25-Cursor
#   colorscheme manxome

---- center

how to debug perl
by rjbs @ Fastmail

----
== how to debug perl

+‚Ä¢ step 1: add more print statements
+‚Ä¢ step 2: that's it; you're done

----
== how to use the perl debugger

‚Ä¢ 99% of the time, my REPL of choice
+‚Ä¢ üÜÅ  ead üÖ¥  valuate üÖø  rint üÖª  oop
+‚Ä¢ you type stuff and the repl evalutes it

----
== how to start the perl debugger

‚Ä¢ perl -de0
+‚Ä¢ there are other repls (Reply is neat)
+‚Ä¢ and other debugger (Devel::ebug is neat)
+‚Ä¢ but basically nobody uses them
+‚Ä¢ so don't ask

----
== the most REPL-y of commands

+EXPR - evaluate an expression
+p‚É£   print a value
+x‚É£   dump a value
+q‚É£   quit

---- center

[ perl repl demo goes here ]

----
== how does it work?

‚Ä¢ perl -d sets a bunch of bits on $^P
+‚Ä¢ for which see perldoc -v '$^P'
+‚Ä¢ key flag: 0x02
+  ‚Ä¢ means: call &DB::DB for each statement

---- center
Devel::Trace
(the stupidest debugger you can write)

---- perl
---- include ../Trace.pm

----
== -d:Trace

‚Ä¢ -d:Trace sets up $^P and loads Devel::Trace
+‚Ä¢ -d (with no :Whatever) loads perl5db.pl
+‚Ä¢ ‚ö†Ô∏è  whatever you do, do not read perl5db.pl
+‚Ä¢ but you can read perldoc perl5db.pl
+‚Ä¢ or, better, perldoc perldebguts
+‚Ä¢ or, much better, perldoc perldebug

----
== perl5db.pl

‚Ä¢ it implements sub DB::DB
+‚Ä¢ which runs a readline loop, dispatching commands
+‚Ä¢ ‚Ä¶some of which means "go ahead and run the next line"

----
== stepping through your code

+ n‚É£  evaluate the next statement
+ s‚É£  step down into the next statement
+ c‚É£  continue until breakpoint
+ ‚Æê  step the same was as last time
+ t‚É£  EXPR trace through evaluation of expr

---- perl
---- include ../01/prng.pl

----
== prng.pl

‚Ä¢ first, let's try running it

---- center

[ prng.pl demo goes here ]

---- center

once again, false 0 is to blame!

---- perl
---- include ../02/prng.pl

----
== let's get real

‚Ä¢ this is not realistic software
+‚Ä¢ because if it was, we would have made a library

---- perl
---- include ../03/PRNG.pm

---- perl
---- include ../03/prng.pl

----
== look before you step

l‚É£      - list the next "window" of lines
+l‚É£  #   - list the code at the given line
+l‚É£  #-# - list the range of lines
+l‚É£  sub - list the named subroutine
+v‚É£      - view a window around the current line
+.‚É£      - reset the current line to execution context

+(look at that adorable little keycap for "."!)

---- center

[ lookin' around demo goes here ]

----
== and once you look around

f‚É£  STR - change the file we're looking at
/‚É£  PAT - search forward for /PAT/
c‚É£   #  - continue running until the given line
t‚É£   n  - turn tracing off or on

---- center

[ f/ct demo goes here ]

----
== breakpoints and actions

‚Ä¢ what even are breakpoints
+‚Ä¢ well, "c" was a breakpoint

----
== breakpoints and actions

b‚É£             - add a breakpoint on the current line
+L‚É£  b         - list all breakpoints
+b‚É£  #         - break at the given line
+b‚É£  sub       - break at the given sub
+b‚É£  # COND    - break at the given line if COND true
b‚É£  sub COND  - break at the given sub  if COND true

+B‚É£  #         - delete breakpoint at given line in current file
B‚É£            - delete all breakpoints

+a‚É£  # PERL    - run the perl before executing line
+L‚É£  a         - list all actions

+A‚É£  #         - delete actions at given line in current file
A‚É£  *         - delete all actions

+L‚É£            - list all breakpoints and actions

---- center

[ breakpoint / action demo goes here ]

---- center

remember, kids, always label your loops

---- perl
---- include ../04/prng.pl

----
== save and source

save FILE   - write your command history to a file
source FILE - run the commands from a file
+R‚É£           - restart debugger (caveats apply!)
+rerun N     - rerun current session to line N (or -N!)

---- center

[ let's try that again ]

----
== as long as we're editing files‚Ä¶

‚Ä¢ I said the debugger let us avoid editing source (to add prints)
+‚Ä¢ true, but...
+‚Ä¢ if we're vimming stuff and restarting, anyway, why not edit the code?
+‚Ä¢ okay, I'm convinced!  let's put debugger helpers in code

---- perl
---- include ../05/PRNG.pm

---- center
[ $DB::single demo ]

----
== that was underwhelming

‚Ä¢¬†in practice, there are a few other variables
‚Ä¢ but my finding is that they're confusing or broken or both

----
== a useful miscellany

|‚É£  DEBUGCMD - run the debugger command, pipe the output to $PAGER
+H‚É£           - list command history (obnoxiously incomplete)
+!‚É£  NUM      - rerun numbered command
+!‚É£  -NUM     - rerun Nth command from end (but note above!)

+=‚É£ ALIAS VALUE - set up an alias

---- perl
---- include ../06/PRNG.pm

---- center
[ alias demo ]

---- center
good grief that was terrible

----
# why would I use aliases???

‚Ä¢¬†I almost never use = aliases (but I do)
+‚Ä¢ but there another way!

---- perl
---- include /Users/rjbs/.perldb

----
# wtf was that?

‚Ä¢ ~/.perldb is sourced when you start the debugger
+‚Ä¢ and it can do ‚ú®anything‚ú®
+‚Ä¢¬†here, it was creating an alias
+‚Ä¢ but this kind of aliases does s/// on the input line (!?)
+‚Ä¢¬†you can tell the difference with =‚É£

---- center

[ alias type demo ]

---- center

I think we could all use a drink right about now.

---- center

How about M√∏√∏se Juice?

---- perl
---- include ../07/PRNG.pm

---- perl
---- include ../07/KeepsLog.pm

---- perl
---- include ../07/PRNG/WithLog.pm

---- perl
---- include ../07/prng.pl

----
== looking around more

m‚É£       - inspect an object's methods

+S‚É£       - list all subroutines
S‚É£  PAT  - list subroutines matching pattern

+M‚É£       - show loaded module versions

+V‚É£       - list all vars in current package
V‚É£  PKG  - list all vars in named package

+y‚É£       - list all lexicals visible here

+T‚É£       - stack trace (but a weird one!)

+r‚É£       - return from current sub

---- center
[ m√∏√∏se juice demo ]

---- center
there is a whole lot more you can do with the debugger

---- center
sometimes, it even works

---- center
and sometimes, it even works how you expect

----
== help!

+h‚É£       - help; it's awful
h‚É£  CMD  - detailed help; useful, but pretty bad
h‚É£  h    - big listing of help, meh, see perldoc perl5db.pl

----
== I wanted to talk about‚Ä¶

‚Ä¢¬†pre- and post- prompt commands
‚Ä¢ watch expressions
‚Ä¢¬†tracing
‚Ä¢¬†how to understand <DB> vs. <<DB>>
‚Ä¢¬†afterinit() and watchfunction()
‚Ä¢¬†remote debugging

---- center
but I didn't

---- center
you're welcome

---- center
and I'm sorry

---- center
Thank you!

Big thanks to my Patreon sponsors.

Don't forget to like, comment, and subscribe to my channel.

---- center
¬øAny questions?

